#include <chrono>
#include <iostream>
#include <thread>
#include <mutex>
#include <vector>

#define MAX_THREADS 32

using namespace std::chrono;
using namespace std;

mutex mylock;

volatile int sum;

void thread_Func(int num_threads)
{
	volatile int local_sum = 0;
	for(auto i = 0; i < 50000000 / num_threads; ++i){
		local_sum += 2;
	}	
	mylock.lock();
	sum += local_sum;
	mylock.unlock();
}

int main()
{
	vector<thread*> threads;
	for(auto i = 1; i <=MAX_THREADS; i *= 2)
	{
		sum = 0;
		threads.clear();
		auto t = high_resolution_clock::now();

		for(auto j = 0; j < i; ++j)
			threads.push_back(new thread(thread_Func, i));
		for(auto temp : threads ) temp->join();

		auto d = high_resolution_clock::now() - t;

		cout<<i<<"threads "<<" sum = "<<sum<<" "<<duration_cast<milliseconds>(d).count()<<"msecs \n";
	}
	
	
	
	
}